---
import Base from "../layouts/Base.astro";
import PostCard from "../components/PostCard.astro";
import { getCollection } from "astro:content";

const pageTitle = "Meaning Alignment Institute";

// Get blog posts from the writing collection
const allPosts = await getCollection("writing");

// Get people data from the people collection
const allPeople = await getCollection("people");

// Group people by category
const researchPeople = allPeople.filter((person) => person.data.category === "research");
const coreTeam = allPeople.filter((person) => person.data.category === "core");
const advisors = allPeople.filter((person) => person.data.category === "advisor");

// Sort on pub date
const sortedPosts = allPosts.sort((a, b) => {
  const dateA = new Date(a.data.pubDate);
  const dateB = new Date(b.data.pubDate); 
  return dateB.getTime() - dateA.getTime();
});

// Filter featured posts and non-featured posts
const pinnedPosts = sortedPosts.filter((post) => post.data.featured === true);
const remainingPosts = sortedPosts.filter((post) => !post.data.featured);
---

<Base pageTitle={pageTitle}>
  <div class="hover-info-square" id="hoverInfoSquare">
    <img id="hoverPortrait" src="/images/people/default.png" alt="MAI" />
    <div class="hover-info-content">
      <h4 id="hoverName">Joe Edelman</h4>
      <p id="hoverRole">Founder & Director</p>
      <p id="hoverBio">Joe focuses on meaning alignment for AI systems and social technologies, working to ensure these systems support what truly matters to people.</p>
    </div>
  </div>
  <!-- Title + Nav Section -->
  <header>
    <div class="header-content">
      <div class="logo">
        <div class="logo-dot"></div>
        <p><a href="/">Meaning Alignment Institute</a></p>
      </div>
      <nav class="main-nav">
        <ul>
          <li><a href="#research">Research</a></li>
          <li><a href="#about">About</a></li>
          <li><a href="#contact">Contact</a></li>
        </ul>
      </nav>
    </div>
    <h1>AI, markets, and democracies aligned with what truly matters.</h1>
  </header>

  <div class="content-grid">
    <!-- Research + Writing Section -->
    <section id="research">
      <h2 class="section-header">Research</h2>
      <div class="section-content">
        <p>
          <span class="mobile-break">Stay up to date,</span> subscribe on <a href="https://meaningalignment.substack.com">Substack</a>.
        </p>
      </div>
      <div class="post-scroll-container">
        <div class="post-scroll">
          {pinnedPosts.map((post) => <PostCard imageUrl={post.data.coverImg || "/src/assets/covers/full-stack-alignment.png"} title={post.data.title} description={post.data.description} category="Featured" url={post.data.externalUrl ?? `/writing/${post.id}/`} featured={true} />)}
          {remainingPosts.map((post) => <PostCard imageUrl={post.data.coverImg || "/src/assets/covers/full-stack-alignment.png"} title={post.data.title} description={post.data.description} category="&nbsp" url={post.data.externalUrl ?? `/writing/${post.id}/`} />)}
        </div>
      </div>
    </section>

    <!-- About + Organization Section -->
    <section id="about">
      <h2 class="section-header">About</h2>
      <div class="section-content">
        <p>
          The Meaning Alignment Institute aligns AI, markets, and democracies with what makes life meaningful. We call this <a href="https://full-stack-alignment.ai">Full-Stack Alignment</a>.
        </p>
        <p>
          Collaborating with 30+ experts, we advance Full-Stack Alignment research from theory to practice. We're a non-profit supported by ARIA, <a href="https://openai.com">OpenAI</a>, <a href="https://survivalandflourishing.fund">SFF</a>, and others.
        </p>
        <p>
          Want to help? Reach us at <a href="mailto:hello@meaningalignment.org">hello@meaningalignment.org</a>
        </p>

        <h3>Research Network</h3>
        <ul class="people-list research-network">
          {researchPeople.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
        </ul>

        <div class="two-column">
          <div>
            <h3>Core Team</h3>
            <ul class="people-list core-team">
              {coreTeam.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
            </ul>
          </div>
          <div>
            <h3>Advisors</h3>
            <ul class="people-list advisors">
              {advisors.map((person) => <li data-person-id={person.id}>{person.data.name}</li>)}
            </ul>
          </div>
        </div>
      </div>
    </section>

    <!-- Contact + Socials Section -->
    <section id="contact">
      <h2 class="section-header">Contact</h2>
      <div class="section-content">
        <h3>Want to Collaborate?</h3>
        <p>
          <a href="mailto:research@meaningalignment.org">research@meaningalignment.org</a>
        </p>

        <h3>General Inquiry</h3>
        <p>
          <a href="mailto:hello@meaningalignment.org">hello@meaningalignment.org</a>
        </p>

        <h3>Follow Us</h3>
        <p>
          <a href="https://meaningalignment.substack.com">Substack</a><br />
          <a href="https://x.com/meaningaligned">X</a>
        </p>

        <ul class="locations-list">
          <li>Berlin, Germany</li>
          <li>San Francisco, United States</li>
        </ul>
      </div>
    </section>
  </div>
</Base>

<script define:vars={{ allPeople }}>
  document.addEventListener("DOMContentLoaded", () => {
    const postScrolls = document.querySelectorAll(".post-scroll");
    
    postScrolls.forEach((scrollArea) => {
      // Prevent browser back navigation on horizontal scroll
      scrollArea.addEventListener("wheel", function (e) {
        const scrollLeft = scrollArea.scrollLeft;

        // If at the left edge and trying to scroll further left with wheel
        if (scrollLeft <= 0 && e.deltaX < 0) {
          e.preventDefault();
        }
      }, { passive: false });
      
      // Improve touch scrolling on mobile
      if ('ontouchstart' in window) {
        const cardLinks = scrollArea.querySelectorAll('.card-link');
        
        // Add small delay for touch events to differentiate between scroll and tap
        cardLinks.forEach(link => {
          let touchStartTime = 0;
          let touchStartX = 0;
          let touchStartY = 0;
          
          link.addEventListener('touchstart', (e) => {
            touchStartTime = Date.now();
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
          }, { passive: true });
          
          link.addEventListener('touchend', (e) => {
            const touchTime = Date.now() - touchStartTime;
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            const distanceX = Math.abs(touchEndX - touchStartX);
            const distanceY = Math.abs(touchEndY - touchStartY);
            
            // If it was a quick tap without much movement, treat as a click
            // Otherwise, it was likely a scroll attempt
            if (touchTime > 300 || distanceX > 10 || distanceY > 10) {
              e.preventDefault();
            }
          }, { passive: false });
        });
      }
    });

    // Enhanced hover interaction for people lists
    const personItems = document.querySelectorAll(".research-network li, .core-team li, .advisors li");
    const hoverCard = document.getElementById("hoverInfoSquare");
    const hoverName = document.getElementById("hoverName");
    const hoverRole = document.getElementById("hoverRole");
    const hoverBio = document.getElementById("hoverBio");
    const hoverPortrait = document.getElementById("hoverPortrait");
    let hideTimeout;
    
    // Detect if device is mobile
    const isMobile = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    // Create a map for quick lookup
    const peopleMap = {};
    if (allPeople) {
      allPeople.forEach((person) => {
        peopleMap[person.id] = person.data;
      });
    }

    personItems.forEach((item) => {
      // Only add mousemove handler for desktop devices
      if (!isMobile) {
        item.addEventListener("mousemove", (e) => {
          // Get mouse position
          const mouseX = e.clientX;
          const mouseY = e.clientY;
          
          // Calculate if cursor is in top 40% of viewport
          const isInTopArea = mouseY < window.innerHeight * 0.4;
          
          // Get card width for centering (default to 300 if not yet rendered)
          const cardWidth = hoverCard.offsetWidth || 300;
          
          // Position the card based on cursor location
          hoverCard.style.position = "fixed";
          hoverCard.style.left = `${mouseX - (cardWidth/2)}px`;
          
          if (isInTopArea) {
            // Position below cursor if in top 40%
            hoverCard.style.top = `${mouseY + 20}px`;
            hoverCard.style.bottom = "auto";
          } else {
            // Position above cursor
            hoverCard.style.bottom = `${window.innerHeight - mouseY + 20}px`;
            hoverCard.style.top = "auto";
          }
          
          // Ensure card stays within viewport bounds
          const rightEdge = mouseX + (cardWidth/2);
          if (rightEdge > window.innerWidth) {
            hoverCard.style.left = `${window.innerWidth - cardWidth - 20}px`;
          }
          if (mouseX - (cardWidth/2) < 20) {
            hoverCard.style.left = "20px";
          }
        });
      }
      
      item.addEventListener("mouseenter", (e) => {
        clearTimeout(hideTimeout);
        const personId = item.getAttribute("data-person-id");
        if (personId && peopleMap[personId]) {
          const personData = peopleMap[personId];
          hoverName.textContent = personData.name;
          hoverRole.textContent = personData.role;
          hoverBio.textContent = personData.bio;

          if (personData.portrait) {
            hoverPortrait.src = personData.portrait;
            hoverPortrait.alt = `Portrait of ${personData.name}`;
            hoverPortrait.style.display = "block";
          } else {
            hoverPortrait.style.display = "none";
          }

          hoverCard.classList.remove("fade-out");
          hoverCard.classList.add("active");
          
          // For mobile, position the card in a fixed position instead of following cursor
          if (isMobile) {
            hoverCard.style.position = "fixed";
            hoverCard.style.left = "50%";
            hoverCard.style.top = "50%";
            hoverCard.style.transform = "translate(-50%, -50%)";
            hoverCard.style.bottom = "auto";
          }
        }
      });

      item.addEventListener("mouseleave", () => {
        hideTimeout = setTimeout(() => {
          hoverCard.classList.add("fade-out");
          hoverCard.classList.remove("active");
        }, 100);
      });
    });

    // Smooth scrolling for navigation
    const navLinks = document.querySelectorAll('.main-nav a');
    
    navLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        
        const targetId = this.getAttribute('href').substring(1);
        const targetSection = document.getElementById(targetId);
        
        if (targetSection) {
          window.scrollTo({
            top: targetSection.offsetTop,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>


