---
interface Props {
  imageUrl: string;
  title: string;
  category: string;
  description: string;
  url?: string;
  size?: string;
  featured?: boolean;
}

const { imageUrl, title, category, description, url, size = "1", featured = false } = Astro.props;
---

<style>
  .sketch {
    padding: 1.23rem 1.23rem;
    width: 222px;
    height: 333px;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    box-sizing: border-box;
    border-radius: 6px;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.11);
    position: relative;
    isolation: isolate;
    filter: drop-shadow(0 0 20px var(--card-glow-color, rgba(0, 0, 0, 0.15)));
    margin: 8px;
    overflow: visible;
    transition:
      filter 0.3s ease,
      transform 0.3s ease;
  }

  @media (prefers-color-scheme: dark) {
    .sketch {
      filter: drop-shadow(0 0 20px var(--card-glow-color, rgba(0, 0, 0, 0.04)));
    }

    .sketch:hover {
      filter: drop-shadow(0 0 25px var(--card-glow-color, rgba(0, 0, 0, 0.03)));
    }
  }

  .sketch:hover {
    filter: drop-shadow(0 0 25px var(--card-glow-color, rgba(0, 0, 0, 0.25)));
    transform: translateY(-4px);
  }

  .sketch::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 6px;
    z-index: 1;
    transition: background-color 0.3s ease;
    mix-blend-mode: plus-darker;
  }

  .sketch::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.33) 0%, rgba(0, 0, 0, 0.22) 15%, rgba(0, 0, 0, 0.25) 30%, rgba(0, 0, 0, 0.15) 45%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0) 75%);
    border-radius: 6px;
    z-index: 2;
    pointer-events: none;
  }

  .sketch-info {
    position: relative;
    z-index: 3;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .sketch-info-top {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .sketch p {
    font-family: "Times New Roman", Times, serif;
    font-style: italic;
    font-size: 2rem;
    font-weight: 222;
    color: var(--txtColorDark, var(--fallback-txt-color-dark));
    text-shadow: 1px 4px 8px rgba(0, 0, 0, 0.25);
    margin: 0;
  }

  .sketch em {
    font-family: "Times New Roman", Times, serif;
    text-shadow:
      1px 4px 8px rgba(0, 0, 0, 0.25),
      0px 1px 2px rgba(0, 0, 0, 0.44);
  }

  em,
  a {
    text-decoration: none;
    color: var(--txtColorDark, var(--fallback-txt-color-dark));
  }

  a {
    display: inline-block;
    width: fit-content;
    height: fit-content;
  }
  
  .card-link {
    touch-action: pan-x pan-y;
  }

  em {
    text-shadow: 1px 1px 6px rgba(0, 0, 0, 0.32);
  }

  @media (prefers-color-scheme: dark) {
    a,
    em {
      color: var(--txtColorDark, var(--fallback-txt-color-dark));
    }
  }
</style>

<script>
  function sampleImageColor(element: HTMLElement): void {
    const img = new Image();
    img.src = element.style.backgroundImage.replace(/url\(['"](.+)['"]\)/, "$1");

    img.onload = () => {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      if (!ctx) return;

      canvas.width = img.width;
      canvas.height = img.height;

      ctx.drawImage(img, 0, 0);

      // Sample the color from the center of the image
      const centerX = Math.floor(canvas.width / 2);
      const centerY = Math.floor(canvas.height / 2);
      const pixel = ctx.getImageData(centerX, centerY, 1, 1).data;

      // Check if dark mode is enabled
      const isDarkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
      const opacity = isDarkMode ? 0.22 : 0.88;

      // Apply the sampled color to the card glow color
      element.style.setProperty("--card-glow-color", `rgba(${pixel[0]}, ${pixel[1]}, ${pixel[2]}, ${opacity})`);
    };
  }

  // Run on all sketch elements
  document.querySelectorAll(".sketch").forEach((el) => sampleImageColor(el as HTMLElement));

  // Update colors when color scheme changes
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
    document.querySelectorAll(".sketch").forEach((el) => sampleImageColor(el as HTMLElement));
  });
</script>

{
  url && (
    <a href={url} target="_blank" class="card-link">
      <div class={`sketch ${featured ? "featured" : ""}`} data-size={size} style={`background-image: url(${imageUrl});`}>
        <div class="sketch-info">
          <div class="sketch-info-top">
            <p>{title}</p>
          </div>
          <em>{description}</em>
        </div>
      </div>
    </a>
  )
}
